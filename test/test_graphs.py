"""
@Author: Simona Bernardi
@Date: updated 19/09/2024

Input dataset:
- energy consumption (in KhW), every half-an-hour, registered by a smartmeter.
- the training set is over 60 weeks
- the testing sets are over 15 weeks: a testing set is either normal or anomalous testings
- The training set and testing sets are stored in separate files in the "/dataset/" folder.

The test program:
-prints and stores the generated graphs as dense matrices
-compares the generated graphs with the ones generated by the not optimized version

Output:
- graphs_teg_sparse.csv file with the generated graphs
"""

import os
import pandas as pd
import numpy as np
import csv

from tegdet.teg import TEGDetector


#Input datasets/output results Paths
TRAINING_DS_PATH = "/dataset/energy/training.csv"
TEST_DS_PATH = "/dataset/energy/test_"
RESULTS_PATH = "/script_results/energy/graphs_teg_sparse.csv"
REFERENCE_PATH = "/script_results/energy/graphs_teg_main.csv"

#List of testing
list_of_testing = ("normal", "anomalous")

#List of metrics (detector variants)
list_of_metrics = [ #"Cosine",  "Jaccard", "Hamming", 
                    "KL",# "Jeffreys", "JS", "Euclidean", 
                    #"Cityblock", "Chebyshev", "Minkowski", "Braycurtis", "Kulczynski", 
                    #"Canberra", #"Bhattacharyya", "Squared", 
                    #"Divergence" #, "Additivesymmetric"
                    ]

#Parameters of TEG detectors: default values
n_bins = 30
n_obs_per_period=336
alpha=5

def print_and_store_graphs(graphs,graphs_path):
    with open(graphs_path,"a") as csvfile:
        writer = csv.writer(csvfile,delimiter=',')
        for g in range(len(graphs)):
            matrix = graphs[g].get_matrix()
            print("Matrix", g, " shape:", matrix.shape)
            matrix_array = matrix.todense()
            print("Matrix:",matrix_array)
            for row in matrix_array:
                writer.writerow(row)

def test_generate_results():

    cwd = os.getcwd() 

    train_ds_path = cwd + TRAINING_DS_PATH

    for metric in list_of_metrics:

        teg = TEGDetector(metric)

        #Load training dataset
        train_ds = teg.get_dataset(train_ds_path)

        assert not train_ds.empty, "The training dataset is empty."

        
        #Build model
        model, time2build, time2graphs, time2global, time2metrics = teg.build_model(train_ds)

        #Store graphs
        graphs = model.get_tegg().get_teg()
        graphs_path = cwd + RESULTS_PATH
        print_and_store_graphs(graphs,graphs_path)

def test_results():

    #Get current working directory
    cwd = os.getcwd() 

    #Load results and reference results
    results_path = cwd + RESULTS_PATH
    reference_path = cwd + REFERENCE_PATH
    teg_sparse = np.loadtxt(results_path, dtype= int, delimiter=',')
    teg_main = np.loadtxt(reference_path, dtype= int, delimiter=',')
    
    #Compare results with  the reference results
    assert np.array_equal(teg_sparse,teg_main), "Results are not equal to the reference results."

if __name__ == '__main__':

    test_generate_results()

    test_results()


