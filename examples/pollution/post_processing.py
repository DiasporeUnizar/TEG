"""
@Author: Simona Bernardi
@Date: updated 15/10/2022

The script:
- - Produces the plot of the two testing sets during the first week
- From the file TEGDET_VARIANTS_RESULTS_PATH
-- Prints on stdout the statistics of the times to build and to make predictions 
-- Shows the accuracy of the TEG-detectors variants as a barplot

"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


#Datasets path
TEST_NORMAL_DS_PATH = "/dataset/pollution/ES_6001_11850_2020_test_normal.csv"
TEST_ANOMALOUS_DS_PATH = "/dataset/pollution/ES_6001_11850_2020_test_anomalous.csv"

#Results path
#Result files generated by the scripts "tegdet_variants" 
TEGDET_VARIANTS_RESULTS_PATH = "/script_results/pollution/tegdet_variants_results_ref.csv"
#Uncomment these lines to analyse the results once the scripts have been run
#TEGDET_VARIANTS_RESULTS_PATH = "/script_results/pollution/tegdet_variants_results.csv"

#Uncomment these lines to post-process the results related to all the available dissimilarity metrics
list_of_metrics = ["Hamming", "Clark", "Canberra", "Lorentzian", "Kulczynski", "Divergence", "Cosine",
                    "Jaccard", "Dice", "KL", "Jeffreys", "JS", "Euclidean", "Cityblock", 
                     "Chebyshev", "Minkowski", "Braycurtis", "Gower", "Soergel", "Bhattacharyya", "Hellinger", 
                     "Matusita", "Squaredchord", "Pearson", "Neyman", "Squared", "Probsymmetric", "Additivesymmetric" 
                    ]

def compare_testing_sets(cwd, n_obs):
    
    dp_range  = range(n_obs) #one week
    test_normal_ds_path = cwd+TEST_NORMAL_DS_PATH
    test_anomalous_ds_path = cwd+TEST_ANOMALOUS_DS_PATH
    testing_normal = pd.read_csv(test_normal_ds_path)['Concentration'].head(len(dp_range))
    testing_anomalous = pd.read_csv(test_anomalous_ds_path)['Concentration'].head(len(dp_range))

    #Generate plot
    plt.plot(dp_range, testing_normal, label="normal")
    plt.plot(dp_range, testing_anomalous, label="anomalous", linestyle=':') #dotted lines
    plt.legend(fontsize="12")
    plt.xlabel('Time (every hour)',fontsize="12")
    plt.ylabel('AirPollutant PM2.5 (microg/m3)',fontsize="12")
    plt.show()

def generate_report_teg_variants(cwd):

    print("-------- TEG variants analysis report ----------------")
    #Load the results
    results_path = cwd + TEGDET_VARIANTS_RESULTS_PATH
    df = pd.read_csv(results_path)   
    #Remove parameters and testing_set columns
    df = df[['detector','time2build', 'time2graphs', 'time2global', 'time2metrics','time2predict','time2window','tp','tn','fp','fn']]
    #Group by detector and takes the sum (of the two testing sets results)
    df_grouped = df.groupby('detector').sum()
    

    #Extract execution times (in ms.: sum_of_the_times / 2 * 1000)
    time2build = df_grouped['time2build'] * 500
    time2graphs = df_grouped['time2graphs'] * 500
    time2global = df_grouped['time2global'] * 500
    time2metrics = df_grouped['time2metrics'] * 500
    time2predict = df_grouped['time2predict'] * 500
    time2window = df_grouped['time2window'] * 500
    #Timing statistics on stdout
    print("Time to build the model (ms):", time2build.describe())
    print("Time to generate TEGs (ms):", time2graphs.describe())
    print("Time to compute global graph (ms):", time2global.describe())
    print("Time to compute metrics (ms):", time2metrics.describe())
    print("Time to make predictions: (ms)", time2predict.describe())
    print("Time to process all windows: (ms)", time2window.describe())
    print("------------------------------------------------------")

    #Get the detectors list
    detectors = df_grouped.index.tolist()
    #Compute the accuracy from the confusion matrix
    num = df_grouped['tp']+df_grouped['tn']
    den = num + df_grouped['fp']+ df_grouped['fn']
    accuracy = num / den   
    print("Accuracy:")
    print(accuracy)

    #Generate barplot
    fig, ax = plt.subplots()
    y_pos = np.arange(len(detectors))
    ax.barh(y_pos, accuracy, align='center', color='green', ecolor='black')
    ax.set_yticks(y_pos)
    ax.set_yticklabels(detectors,fontsize=10)
    ax.invert_yaxis()  
    ax.set_xlabel('Accuracy')
    plt.show()
    

if __name__ == '__main__':

    #Get the current directory
    cwd = os.getcwd() 

    #Compare testing sets (one week observations)
    compare_testing_sets(cwd,168)

    generate_report_teg_variants(cwd)


    